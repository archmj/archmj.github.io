{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/spring-uses-annotations-for-development.html","result":{"data":{"post":{"__typename":"MdxPost","slug":"/spring-uses-annotations-for-development.html","title":"Spring使用注解开发","date":"2020/03/16","tags":[{"name":"spring","slug":"spring"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Spring使用注解开发\",\n  \"date\": \"2020-03-16 16:16\",\n  \"slug\": \"/spring-uses-annotations-for-development.html\",\n  \"tags\": [\"spring\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u5728\\u8F6F\\u4EF6\\u5F00\\u53D1\\u4E2D\\u5B58\\u5728\\u5927\\u91CF\\u7684\\u914D\\u7F6E\\u4FE1\\u606F\\uFF0C\\u901A\\u5E38\\u4F20\\u7EDF\\u505A\\u6CD5\\u662F\\u5C06\\u5176\\u5199\\u6210\\u914D\\u7F6E\\u6587\\u4EF6\\u3002\\u6BD4\\u5982\\u57FA\\u4E8Ejavaweb\\u7684\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"web.xml\"), \"\\u914D\\u7F6E\\u9879\\u3002\\u5F53\\u9879\\u76EE\\u53D1\\u5C55\\u5230\\u4E00\\u5B9A\\u7684\\u89C4\\u6A21\\u7684\\u65F6\\u5019\\uFF0C\\u5927\\u91CF\\u7684\\u914D\\u7F6E\\u6587\\u4EF6\\u4F1A\\u8BA9\\u6211\\u4EEC\\u7BA1\\u7406\\uFF0C\\u5E76\\u4E14\\u4F1A\\u611F\\u5230\\u6709\\u90A3\\u4E48\\u7684\\u4E00\\u4E9B\\u91CD\\u3002\"), mdx(\"p\", null, \"\\u968F\\u7740springboot\\u7684\\u6D41\\u884C\\uFF0C\\u57FA\\u4E8E\\u6CE8\\u89E3\\u7684\\u5F00\\u53D1\\u5DF2\\u7ECF\\u8D8A\\u53D1\\u7684\\u4F53\\u73B0\\u51FA\\u5B83\\u7684\\u4F18\\u96C5\\u548C\\u6613\\u7528\\u3002\\u5728\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spring3\"), \"\\u7684\\u65F6\\u5019\\u5DF2\\u7ECF\\u652F\\u6301\\u5927\\u91CF\\u7684\\u6CE8\\u89E3\\u4E86\\uFF0C\\u5230\\u540E\\u9762\\u7684\\u57FA\\u4E8E\\u6CE8\\u89E3\\u5F00\\u53D1\\u7684\\u5F62\\u5F0F\\u4E5F\\u8D8A\\u53D1\\u5F3A\\u5927\\u3002\"), mdx(\"p\", null, \"\\u4EE5\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maven\"), \"\\u642D\\u5EFA\\u7684\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spring\"), \"\\u5DE5\\u7A0B\\u4E3A\\u4F8B\\uFF0C\\u5728\\u9879\\u76EE\\u4E2D\\u6DFB\\u52A0\\u4E00\\u4E2A\\u6570\\u636E\\u6E90\\u4F9D\\u8D56\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"   <dependency>\\n            <groupId>com.alibaba</groupId>\\n            <artifactId>druid</artifactId>\\n            <version>1.1.21</version>\\n        </dependency>\\n\")), mdx(\"p\", null, \"\\u5728\\u8D44\\u6E90\\u6587\\u4EF6\\u76EE\\u5F55\\u4E0B\\u65B0\\u5EFA\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jdbc.properties\"), \"\\u914D\\u7F6E\\u6587\\u4EF6\\uFF0C\\u6DFB\\u52A0\\u6570\\u636E\\u6E90\\u4FE1\\u606F\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-properties\"\n  }), \"jdbc.driverClassName=com.mysql.jdbc.Driver\\njdbc.url=jdbc:mysql://localhost:3306/community?useUnicode=true&characterEncoding=utf8\\njdbc.username=root\\njdbc.password=123456\\n\")), mdx(\"p\", null, \"\\u4F7F\\u7528\\u6CE8\\u89E3\\u7684\\u65B9\\u5F0F\\u914D\\u7F6E\\u6570\\u636E\\u5E93\\u8FDE\\u63A5\\u6C60\\u4FE1\\u606F\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Configuration\\n@PropertySource(\\\"classpath:jdbc.properties\\\")\\npublic class JDBCConfiguarion {\\n\\n    @Value(\\\"${jdbc.driverClassName}\\\")\\n    private String driverClassName;\\n    @Value(\\\"${jdbc.url}\\\")\\n    private String url;\\n    @Value(\\\"${jdbc.username}\\\")\\n    private String username;\\n    @Value(\\\"${jdbc.password}\\\")\\n    private String password;\\n\\n    @Bean\\n    public DruidDataSource dataSource(){\\n        DruidDataSource dataSource = new DruidDataSource();\\n        dataSource.setDriverClassName(driverClassName);\\n        dataSource.setUrl(url);\\n        dataSource.setUsername(username);\\n        dataSource.setPassword(password);\\n        return dataSource;\\n    }\\n}\\n\")), mdx(\"p\", null, \"\\u5728\\u9879\\u76EE\\u4E2D\\u6CE8\\u5165\\u6570\\u636E\\u6E90\\u5E76\\u5DF2\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"debug\"), \"\\u5F62\\u5F0F\\u67E5\\u770B\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dataSource\"), \"\\u7684\\u503C\\uFF0C\\u5982\\u679C\\u53D1\\u73B0\\u914D\\u7F6E\\u4E2D\\u52A0\\u8F7D\\u4E86\\u6570\\u636E\\u5E93\\u4FE1\\u606F\\u5219\\u6CE8\\u5165\\u6210\\u529F\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@RestController\\npublic class DataSourceController {\\n\\n    @Autowired\\n    private DataSource dataSource;\\n\\n    @GetMapping(\\\"hello\\\")\\n    public String datasource(){\\n        try {\\n            Connection connection = dataSource.getConnection();\\n        } catch (SQLException e) {\\n            e.printStackTrace();\\n        }\\n        return \\\"hello\\\";\\n    }\\n\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"在软件开发中存在大量的配置信息，通常传统做法是将其写成配置文件。比如基于javaweb的 web.xml 配置项。当项目发展到一定的规模的时候，大量的配置文件会让我们管理，并且会感到有那么的一些重。 随着springboot…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/spring-uses-annotations-for-development.html","formatString":"YYYY/MM/DD"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}